#!/usr/bin/env python3 -u

"""
cloudfiles-ping: Test the performance and availability of the Rackspace 
cloudfiles or Openstack swift service.
"""

import argparse
import contextlib
import os
import time
import uuid
import sys
import socket
import syslog

# Intentionally not using swiftclient.Connection ( wrapper to functions with
# retry ), using the underlying function instead.
from swiftclient import http_connection, get_auth, get_account, get_object
from swiftclient import get_container, put_object, delete_object
from swiftclient import version as swiftclient_version

DEFAULT_PING_INTERVAL = 60
DEFAULT_PING_REPETITIONS = None
TEST_DATA = 'The quick brown fox jumps over the lazy dog.'
auth_times=[]
connect_times=[]
container_times=[]
write_times=[]
read_times=[]
delete_times=[]
total_times=[]
graphite_metric_root_path='cfping.'
CARBON_SERVER_IP = None
CARBON_PORT = 2003

def sizeof_fmt(num):
    for x in ['bytes','KB','MB','GB','TB','PB']:
        if num < 1024.0:
            return "%3.1f %s" % (num, x)
        num /= 1024.0


@contextlib.contextmanager
def timer(time_list=[], stats=False):
    """
    Time an operation.
    """
    start_time = time.time()
    yield
    end_time = time.time()

    elapsed_time = end_time - start_time

    print('%10.3f' % (elapsed_time), end=' ')
    time_list.append(elapsed_time)

def ping(auth_url, username, key, tenant, auth_version, container=None, stats=False):
    """
    Ping the Rackspace cloudfiles or Openstack swift service, printing the
    elapsed time for a connection, a write, and a read.
    """

    try:
        with timer(total_times, stats):

            with timer(auth_times, stats):
                url, token = get_auth(auth_url, user=username, key=key,
                                      tenant_name=tenant,
                                      auth_version=auth_version)
            with timer(connect_times, stats):
                purl, conn = http_connection(url,
                                             default_user_agent="cfping/python-swiftclient-%s"
                                             % swiftclient_version.version_string)

            # If no container is specified, grab the first one, but don't time that operation.
            if container is None:
                # Get first container
                _, containers = get_account(url, token, http_conn=(purl, conn))
                container = containers[0]['name']

            with timer(container_times, stats):
                    _ = get_container(url, token, container, http_conn=(purl, conn))

            obj_name = str(uuid.uuid4())

            with timer(write_times, stats):
                _ = put_object(url, token, container=container,
                                  name=obj_name, contents=TEST_DATA,
                                  http_conn=(purl, conn))

            with timer(read_times, stats):
                _, contents = get_object(url, token, container=container,
                                    name=obj_name, http_conn=(purl, conn))

            with timer(delete_times, stats):
                delete_object(url, token, container=container, name=obj_name,
                              http_conn=(purl, conn))

        # Contents will be a byte-string
        if contents.decode() != TEST_DATA:
            print('%10s' % ('NOMATCH'), end=' ')

    except KeyboardInterrupt:
        raise
    except Exception as e:
        print('%10s (Exception: %s)' % ('*', e), end=' ')

    print()

def send_graphite_stats(carbon_server_ip,carbon_port,metric_path_root):
    try:
        timestamp=int(time.time())
        message=''
        lines=[
            metric_path_root+'auth %3.3f %d' % (auth_times[-1],
                                             timestamp),
            metric_path_root+'connect %3.3f %d' % (connect_times[-1],
                                             timestamp),
            metric_path_root+'container %3.3f %d' % (container_times[-1],
                                               timestamp),
            metric_path_root+'write %3.3f %d' % (write_times[-1],
                                           timestamp),
            metric_path_root+'read %3.3f %d' %  (read_times[-1],
                                           timestamp),
            metric_path_root+'delete %3.3f %d' % (delete_times[-1],
                                            timestamp),
            metric_path_root+'total %3.3f %d' % (total_times[-1],
                                           timestamp)
        ]
        message = '\n'.join(lines) + '\n'
        sock = socket.socket()
        sock.connect((carbon_server_ip, carbon_port))
        sock.sendall(message)
        sock.close()
    except Exception as e:
        print('Failed to send %s %s (%s) %s' % (carbon_server_ip,
                                                carbon_port,
                                                message, e))
        syslog.syslog('Failed to send %s %s (%s) %s' % (carbon_server_ip,
                      carbon_port, message, e))


def ping_forever(authurl, username, key, tenant, auth_version, container=None,
                 ping_interval=DEFAULT_PING_INTERVAL,
                 repetitions=DEFAULT_PING_REPETITIONS, machine_readable=False,
                 stats=False, carbon_server_ip=CARBON_SERVER_IP,
                 carbon_port=CARBON_PORT,
                 metric_path_root=graphite_metric_root_path):
    """
    Continually ping the Rackspace cloudfiles or Openstack swift service,
    sleeping for `ping_interval` seconds between requests.
    """
    if not machine_readable:
        print('Pinging storage (sending request every %2.2f seconds with %s):' % (
               ping_interval, sizeof_fmt(sys.getsizeof(TEST_DATA))))
        print('%10s %10s %10s %10s %10s %10s %10s %10s' % ('seq. #',
                                                           'auth',
                                                           'connect',
                                                           'container',
                                                           'write',
                                                           'read',
                                                           'delete',
                                                           'total'))

    try:
        request_count = 1
        while True:
            print('%10d' % (request_count), end=' ')
            ping(authurl, username, key, tenant, auth_version,
                 container=container, stats=stats)
            if carbon_server_ip:
                send_graphite_stats(carbon_server_ip, carbon_port,
                                    metric_path_root)
            request_count += 1
            if repetitions is not None and request_count > repetitions:
                break
            if not machine_readable and not request_count % 25:
                print('%10s %10s %10s %10s %10s %10s %10s %10s' % ('seq. #',
                                                                   'auth',
                                                                   'connect',
                                                                   'container', 
                                                                   'write',
                                                                   'read',
                                                                   'delete',
                                                                   'total'))
            time.sleep(ping_interval)

    except KeyboardInterrupt:
        print()

    if stats:
        if not machine_readable:
            print('')
        print('%10s %10.3f %10.3f %10.3f %10.3f %10.3f %10.3f %10.3f' % (
              'min',
              min(auth_times),
              min(connect_times),
              min(container_times),
              min(write_times),
              min(read_times),
              min(delete_times),
              min(total_times)))
        print('%10s %10.3f %10.3f %10.3f %10.3f %10.3f %10.3f %10.3f' % (
              'max',
              max(auth_times),
              max(connect_times),
              max(container_times),
              max(write_times),
              max(read_times),
              max(delete_times),
              max(total_times)))
        print('%10s %10.3f %10.3f %10.3f %10.3f %10.3f %10.3f %10.3f' % (
              'avg',
              sum(auth_times) / float(len(auth_times)),
              sum(connect_times) / float(len(connect_times)),
              sum(container_times) / float(len(container_times)),
              sum(write_times) / float(len(write_times)),
              sum(read_times) / float(len(read_times)),
              sum(delete_times) / float(len(delete_times)),
              sum(total_times) / float(len(total_times))))

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Test the performance and availability of the Rackspace cloudfiles or Openstack swift service.')

    parser.add_argument('-u', '--username',
                        help='Storage service username (default: OS_USERNAME)')
    parser.add_argument('-t', '--tenantname',
                        help='Storage service username (default: OS_TENANT_NAME)')
    parser.add_argument('-k', '--key',
                        help='Storage service API key (default: OS_PASSWORD)')
    parser.add_argument('-a', '--authurl',
                        help='Storage service auth URL (default: OS_AUTH_URL)')
    parser.add_argument('-V', '--auth_version',
                        help='Storage service auth version (default: 2 if OS_AUTH_VERSION absent')
    parser.add_argument('-c', '--container',
                        help='Use the specified container (default: use the first container [index 0])')
    parser.add_argument('-i', '--interval', dest='ping_interval',
                        type=float, default=DEFAULT_PING_INTERVAL,
                        help='Seconds to wait between ping requests (default: %d seconds)' % DEFAULT_PING_INTERVAL)
    parser.add_argument('-r', '--repetitions', dest='ping_repetitions', type=int,
                        default=DEFAULT_PING_REPETITIONS,
                        help='Number of repetitions (default: infinite)')
    parser.add_argument('-T', '--test-data-size', dest='test_data_size', type=int,
                        default=sys.getsizeof(TEST_DATA),
                        help='Test data size in Bytes (default: %d Bytes)' % sys.getsizeof(TEST_DATA))
    parser.add_argument('-m', '--machinereadable',
                        help='Output results with no headers',
                        action='store_true')
    parser.add_argument('-d', '--data',
                        help='Output statistics for the tests, min, max, and average (mean)',
                        action='store_true')
    parser.add_argument('--graphite-root-metric-path',
                        help='The root of the graphite metric path (default: '
                             'GRAPHITE_ROOT %s)' % graphite_metric_root_path )
    parser.add_argument('--carbon-server-ip',
                        help='IPv4 address of the carbon server (default: CARBON_IP)',
                        default=CARBON_SERVER_IP)
    parser.add_argument('--carbon-port', type=int,
                        help='Carbon server port (default: CARBON_PORT %s)' % CARBON_PORT,
                        default=CARBON_PORT)
    args = parser.parse_args()

    auth_version = args.auth_version or os.getenv('OS_AUTH_VERSION')
    if not auth_version:
        auth_version = '2'

    username = args.username or os.getenv('OS_USERNAME')
    if not username:
        parser.error("username not provided and not found in OS_USERNAME environment variable")

    tenant = args.tenantname or os.getenv('OS_TENANT_NAME')
    if not tenant:
        parser.error("tenant not provided and not found in OS_TENANT_NAME environment variable")

    key = args.key or os.getenv('OS_PASSWORD')
    if not key:
        parser.error("password not provided and not found in OS_PASSWORD environment variable")

    authurl = args.authurl or os.getenv('OS_AUTH_URL')
    if not authurl:
        parser.error("auth URL not provided and not found in OS_AUTH_URL environment variable")

    if args.test_data_size != sys.getsizeof(TEST_DATA):
        TEST_DATA = str(os.urandom(args.test_data_size - sys.getsizeof('')))
    # graphite vars
    metric_path_root = args.graphite_root_metric_path or os.getenv('GRAPHITE_ROOT')
    carbon_server_ip = args.carbon_server_ip or os.getenv('CARBON_SERVER_IP')
    carbon_port = args.carbon_port or os.getenv('CARBON_PORT')
    if metric_path_root and not metric_path_root.endswith('.'):
        metric_path_root +'.'

    ping_forever(authurl, username, key, tenant, auth_version,
                 container=args.container, ping_interval=args.ping_interval,
                 repetitions=args.ping_repetitions,
                 machine_readable=args.machinereadable, stats=args.data,
                 carbon_server_ip=carbon_server_ip, carbon_port=carbon_port,
                 metric_path_root=metric_path_root )
